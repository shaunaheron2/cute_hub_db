

```{r}
library(shinydashboard)
library(shiny)
library(readxl)
library(readr)
library(RSQLite)
library(DT)
library(DBI)
library(tidyverse)
library(janitor)
```

```{r}
# Create or connect to a new SQLite DB file
con <- dbConnect(SQLite(), dbname = "client_visits.db")
```
```{r}



# Drop tables if they already exist (for re-runs)
dbExecute(con, "DROP TABLE IF EXISTS visits")
dbExecute(con, "DROP TABLE IF EXISTS clients")

# Create `clients` table
dbExecute(con, "
  CREATE TABLE clients (
    client_id INTEGER PRIMARY KEY,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    dob DATE NOT NULL,
    entered_date DATE DEFAULT CURRENT_DATE
  )
")

# Create `visits` table
dbExecute(con, "
  CREATE TABLE visits (
    visit_id INTEGER PRIMARY KEY AUTOINCREMENT,
    client_id INTEGER NOT NULL,
    visit_date DATE NOT NULL,
    FOREIGN KEY(client_id) REFERENCES clients(client_id)
  )
")

# Close connection
dbDisconnect(con)



```
```{r}
con <- dbConnect(SQLite(), "client_visits.db")
clients <- data.frame(
  first_name = c("Alice", "Bob", "Carol", "David", "Eve", "Alicia"),
  last_name = c("Smith", "Johnson", "Brown", "Wilson", "Davis", "Smythe"),
  dob = as.Date(c("1990-05-01", "1985-07-12", "2000-01-30", "1978-03-14", "1992-09-09", "1991-11-11"))
)

# Insert sample data
for (i in seq_len(nrow(clients))) {
  dbExecute(con, "
    INSERT INTO clients (first_name, last_name, dob)
    VALUES (?, ?, ?)
  ", params = list(clients$first_name[i], clients$last_name[i], clients$dob[i]))
}

# Confirm
print(dbReadTable(con, "clients"))

# Disconnect
dbDisconnect(con)
```

```{r}
library(bslib)
custom_theme <- bs_theme(
    version = 5,
    bg = "#FFFFFF",
    fg = "#000000",
    primary = "#0199F8",
    secondary = "#FF374B",
    base_font = "Nunito"
)
```
```{r}

library(shiny)
library(shinydashboard)
library(DBI)
library(RSQLite)
library(dplyr)
library(stringr)
library(DT)

# Connect to SQLite
con <- dbConnect(SQLite(), "client_visits.db")

ui <- dashboardPage(
        dashboardHeader(title = "Hub Visit Tracker"),
  
        dashboardSidebar(
          sidebarMenu(
            menuItem("Search/Add Visits", tabName = "visit_tab", icon = icon("user-plus")),
            menuItem("View Clients", tabName = "clients_tab", icon = icon("table")),
            menuItem("View Visits", tabName = "visitlist_tab",
            icon = icon('table'))
          )
        ),
  
        dashboardBody(
          tabItems(
            tabItem(tabName = "visit_tab",
              fluidRow(
                box(width = 4, title = "Search Client", status = "warning",
                    textInput("name_search", "Search:"),
                    actionButton("search", "Search"),
                    hr(),
                    uiOutput("add_visit_ui"),
                    uiOutput("view_visits_ui")
                ),
                box(width = 4, title = "Add New Client", status = "success",
                    textInput("new_first", "First Name"),
                    textInput("new_last", "Last Name"),
                    dateInput("new_dob", "Date of Birth", value = as.Date('2009-01-01'), min = '1994-01-01', max = "2023-01-01"),
                    actionButton("add_client", "Add Client")
                )
              ),
              fluidRow(
                box(title = "Search Results", width = 12, solidHeader = TRUE, status = "primary",
                    DT::dataTableOutput("client_results"))
              ),
              # fluidRow(
              #   box(title = "Visit History", width = 12, solidHeader = TRUE, status = "info",
              #       DT::dataTableOutput("visit_history"))
              # )
            ),
            tabItem(tabName = "clients_tab",
              fluidRow(
                box(title = "All Clients", width = 12, solidHeader = TRUE, status = "info",
                    DT::dataTableOutput("all_clients"))
              )
            ),
            tabItem(tabName = 'visitlist_tab',
            fluidRow(
              box(title = "All Visits", width =12,
              solidHeader = TRUE, status = 'info',
                DT::dataTableOutput('all_visits'))
            )
            )
          )
        )
      )

      server <- function(input, output, session) {
        search_results <- reactiveVal(data.frame())
        visit_data <- reactiveVal(data.frame())

        # Trigger search on enter or button
        observeEvent({
          input$search
          input$name_search
        }, {
          req(input$name_search)
          query <- str_trim(tolower(input$name_search))
          if (query == "") return(NULL)

          result <- dbGetQuery(con, "SELECT * FROM clients") %>%
            filter(
              str_detect(tolower(first_name), regex(query, ignore_case = TRUE)) |
              str_detect(tolower(last_name), regex(query, ignore_case = TRUE))
            ) %>%
            mutate(
              dob = as.Date(dob, origin = "1970-01-01"),
              entered_date = as.Date(entered_date, origin = "1970-01-01")
            )

          search_results(result)
        }, ignoreInit = TRUE)

        output$client_results <- DT::renderDataTable({
          search_results()
        })

        output$add_visit_ui <- renderUI({
          results <- search_results()
          if (nrow(results) == 0) return(NULL)

          tagList(
            selectInput("selected_client", "Select Client for Visit",
                        choices = setNames(results$client_id,
                                          paste(results$first_name, results$last_name))),
            actionButton("add_visit", "Add Visit (Today)", class = "btn-warning")
          )
        })

        # output$view_visits_ui <- renderUI({
        #   if (is.null(input$selected_client)) return(NULL)
        #   actionButton("view_visits", "View Visit History")
        # })

        output$all_clients <- DT::renderDataTable({
          dbGetQuery(con, "SELECT * FROM clients") %>%
            mutate(
              dob = as.Date(dob),
              entered_date = as.Date(entered_date)
            ) %>%
            datatable(
              rownames = FALSE,) 
                
        })

        output$all_visits <- DT::renderDataTable({
          dbGetQuery(con, "
            SELECT v.visit_id, v.client_id, c.first_name, c.last_name, v.visit_date
            FROM visits v
            LEFT JOIN clients c ON v.client_id = c.client_id
            ORDER BY v.visit_date DESC
          ") %>%
            mutate(visit_date = as.Date(visit_date, origin = "1970-01-01")) |>
            datatable(rownames = FALSE)
        })

      ## need to add conditional that we only add the visit if there isn't
      ## already a visit added for that day; if so returns "Visit already added"
        observeEvent(input$add_visit, {
          req(input$selected_client)
          # Check if visit already exists for today
          existing <- dbGetQuery(con, "
            SELECT 1 FROM visits
            WHERE client_id = ? AND visit_date = ?
            LIMIT 1
          ", params = list(input$selected_client, as.character(Sys.Date())))

          if (nrow(existing) == 0) {
            dbExecute(con, "
              INSERT INTO visits (client_id, visit_date)
              VALUES (?, ?)
            ", params = list(input$selected_client, as.character(Sys.Date())))
            showNotification("Visit added!", type = "message")
          } else {
            showNotification("Visit already recorded for today.", type = "warning")
          }
        })

        observeEvent(input$view_visits, {
          req(input$selected_client)
          visits <- dbGetQuery(con, "
            SELECT visit_date FROM visits WHERE client_id = ?
            ORDER BY visit_date DESC
          ", params = list(input$selected_client))
          visit_data(visits)
        })

        output$visit_history <- DT::renderDataTable({
          v <- visit_data()
          if (nrow(v) == 0) return(data.frame(Message = "No visits found"))
          v %>% mutate(visit_date = as.Date(visit_date))
        })

        observeEvent(input$add_client, {
          req(input$new_first, input$new_last, input$new_dob)
          dbExecute(con, "
            INSERT INTO clients (first_name, last_name, dob)
            VALUES (?, ?, ?)
          ", params = list(input$new_first, input$new_last, input$new_dob))
          showNotification("Client added!", type = "message")
          search_results(data.frame())  # Clear search after adding
        })

        session$onSessionEnded(function() {
          dbDisconnect(con)
        })
      }

      shinyApp(ui = ui, server = server)


```